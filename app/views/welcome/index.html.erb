<!-- To make JRuby run faster, do "export JAVA_OPTS='-d32'" before "rails s" to make Java HotSpot run on CLIENT, not SERVER -->

<script type="text/javascript">
$(function() { 
    $("#myTab a").click(function(event){
      event.preventDefault();
      $(this).tab('show');
    });
});
</script>

<div class="bs-example">
  <ul class="nav nav-tabs" id="myTab">
    <li class="active"><a href="#sectionA">Ruby Code Editor</a></li>
    
    <li><a id="upload_test" href="#uploadtest">Upload</a></li>

    <li class="dropdown">
      <a id="testtab" data-toggle="dropdown" class="dropdown-toggle" href="#">RSpec Tests<b class="caret"></b></a>
      <ul class="dropdown-menu">

        <% @testers.sort_by{ |t| t.code}.each do |tester| %>
          <li><a class="test_link" id="<%= tester.id %>" href="#test"><%= tester.code %></a></li>
        <% end %>

      </ul>
    </li>

    <li><a id="upload_code" href="#uploadcode">Upload</a></li>

    <li class="dropdown">
      <a id="codetab" data-toggle="dropdown" class="dropdown-toggle" href="#">Ruby Code<b class="caret"></b></a>
      <ul class="dropdown-menu">

        <% @coders.sort_by { |c| c.code}.each do |coder| %>
          <li><a class="code_link" id="<%= coder.id %>" href="#code"><%= coder.code %></a></li>
        <% end %>

      </ul>
    </li>

    <li><a href="#sectionB">How to Use</a></li>

  </ul>

<script>
var param = window.location.search.replace( "?", "" );
var param_id = param.split("id=")[1]

if (param) {
  if (param.slice(0,4) === "code") {
    $('#codetab').tab('show').click();
    $.get("/coders/" + param_id + "/edit", function( data ) {
      $("#code").html(data);
    });
  }
  else if (param.slice(0,4) === "test") {
    $('#testtab').tab('show').click();
    $.get("/testers/" + param_id + "/edit", function( data ) {
      $("#test").html(data);
    });
  }
}
</script>

  <div class="tab-content">
    <div id="sectionA" class="tab-pane fade in active">
      <textarea class="my-code-index" id="start-index" rows="20" style="width: 90%">
def is_prime?(n)        # optimized trial division
  return true if n.between?(2, 3)
  return false if (n.even? || n % 3 == 0 || n <= 1)   # no evens, multiples of 3, or nums <= 1
  j, w = 5, 2
  while j * j <= n                # Only must check j up to sqrt(n)
    return false if n % j == 0
    j += w                        # Only check odd #'s. j + 2
    w = 6 - w                     # Don't check multiples of 3. j + 4.
  end           # Alternate +2, +4, +2, +4. Ex: 5+2 = 7+4 = 11+2 = 13+4 = 17 ...
  true
end 

puts "I'll tell you if a number is prime."
n = 32416190071
puts "Is #{n} prime? #{is_prime?(n)}."

# Keeps comparing/swapping adjacent elements from left to right, repeatedly
def bubble_sort(list)
  loop do
    swapped = false

    (list.size - 1).times do |i|
      if list[i] > list[i+1]    # if current > next
        list[i], list[i+1] = list[i+1], list[i]   # swap current and next values
        swapped = true
      end
    end

    # if swap happened, return to start and scan whole list again from left to right
    # else we're done
    break unless swapped  
  end
  list
end

n = 200
a = Array.new(n) { rand(n) }  # make array of random numbers

puts "Returns sorted array of #{n} random numbers:"
bubble_sort(a)
      </textarea>
      <button id="run-index" class="btn btn-success">Run Code</button> <button id="cls-index" class="btn">Clear Screens</button>
      <br><br>

      <textarea class="my-code-index" id="result-index"  rows="14" style="width: 90%"></textarea>

    </div>

    <div id="uploadtest" class="tab-pane fade">
      <script>
        $( "#upload_test" ).click(function( event ) {
          $.get("/testers/new", function( data ) {
            $("#uploadtest").html(data);
          });
        });
      </script>
    </div>

    <div id="uploadcode" class="tab-pane fade">
      <script>
        $( "#upload_code" ).click(function( event ) {
          $.get("/coders/new", function( data ) {
            $("#uploadcode").html(data);
          });
        });
      </script>
    </div>

    <div id="test" class="tab-pane fade">
      <script>
        $( ".test_link" ).click(function( event ) {
          $.get("/testers/" + this.id + "/edit", function( data ) {
            $("#test").html(data);
          });
        });
      </script>
    </div>

    <div id="code" class="tab-pane fade">
      <script>
        $( ".code_link" ).click(function( event ) {
          $.get("/coders/" + this.id + "/edit", function( data ) {
            $("#code").html(data);
          });
        });
      </script>
    </div>

    <div id="sectionB" class="tab-pane fade">
      <p><b>If you are an employer or school:</b>
      <ol>
        <li>Upload <a href="http://rspec.info/">RSpec</a> Ruby test code for your coding challenge or programming homework.</li>
        <li>Tell job applicants or students to upload their Ruby code that matches your test.</li>
        <li>Run RSpec test against their code. See their errors, if any.</li>
        <li>Edit and resave your Rpsec tests, if you wish.</li>
        <li>Use Cherry to check their Ruby coding skills.</li>
      </ol>
      <p><b>If you are everyone else:</b>
      <ol>
        <li>Upload your RSpec Ruby test code.</li>
        <li>Upload your Ruby code matching this test.</li>
        <li>Run RSpec test against your code.</li>
        <li>Edit and resave your Ruby code, if you wish.</li>
        <li>Have fun playing with the online Ruby editor! It works almost as well as IRB, but it does not allow "gets" statement and freezes during infinite loops.</li>
      </ol></p>    
    </div>
  </div>

</div>   

<script>
$(function(){
  $('#start-index').ace({ theme: 'tomorrow_night_bright', lang: 'ruby' })
  $('#result-index').ace({ theme: 'github', lang: 'ruby' })
  var editor1 = $("#start-index").data('ace').editor.ace;
  var editor2 = $("#result-index").data('ace').editor.ace; 
  editor1.getSession().setUseWrapMode(true);   //turn on word wrap
  editor1.getSession().setTabSize(2);
  editor2.getSession().setUseWrapMode(true);

  // Clear both screens
  $("#cls-index").click(function(event) {
    editor1.setValue();
    editor2.setValue();
  });

  // Run code
  $( "body").on("click", "#run-index", function( event ) {
    var lines = $('#start-index').val();
    $.post( "/rubyeval", { line: lines }, function( data ) {
      console.log(data.answer);

      // May use all of Ace's editor methods now!
      string_io = data.answer[0];
      return_val = data.answer[1];
      error_msg = data.answer[2];
      if (error_msg != null) {
        error_msg = "\n" + data.answer[2];
      } else {
        error_msg = '';
      }

      // Just like IRB, this prints both stringIO and return value!
      editor2.setValue(string_io + "=> " + return_val + error_msg); 
      event.preventDefault();
    });
  });
});   
</script>  