<title>Raymond Online RSpec Ruby Tester and REPL</title>
<meta name="Content-Type" content="text/html; charset=UTF-8">

<h1>Raymond RSpec Ruby Tester and Online Code Editor</h1>
  <%= link_to "Upload RSpec Tests", testers_path, class: "button black" %>  
  <%= link_to "Upload Your Ruby Code", coders_path, class: "button black" %><br><br>

<textarea class="my-code" id="start" rows="14" style="width: 85%">
def is_prime?(n)        # optimized trial division
  return true if n.between?(2, 3)
  return false if (n.even? || n % 3 == 0 || n <= 1)   # no evens, multiples of 3, or nums <= 1
  j, w = 5, 2
  while j * j <= n                # Only must check j up to sqrt(n)
    return false if n % j == 0
    j += w                        # Only check odd #'s. j + 2
    w = 6 - w                     # Don't check multiples of 3. j + 4.
  end           # Alternate +2, +4, +2, +4. Ex: 5+2 = 7+4 = 11+2 = 13+4 = 17 ...
  true
end 

puts "I'll tell you if a number is prime."
n = 32416190071
puts "Is #{n} prime? #{is_prime?(n)}."

# Keeps comparing/swapping adjacent elements from left to right, repeatedly
def bubble_sort(list)
  loop do
    swapped = false

    (list.size - 1).times do |i|
      if list[i] > list[i+1]    # if current > next
        list[i], list[i+1] = list[i+1], list[i]   # swap current and next values
        swapped = true
      end
    end

    # if swap happened, return to start and scans whole list again from left to right
    # else we're done
    break unless swapped  
  end
  list
end

n = 300
a = Array.new(n) { rand(n) }  # make array of random numbers

puts "Returns sorted array of #{n} random numbers:"
bubble_sort(a)
</textarea>
<button id="btn" class="btn btn-danger">Run Code</button> <button id="cls" class="btn">Clear Screens</button>
<br><br>

<textarea class="my-code" id="result"  rows="14" style="width: 85%"></textarea>

<script>

  $('#start').ace({ theme: 'tomorrow_night_bright', lang: 'ruby' })
  $('#result').ace({ theme: 'github', lang: 'ruby' })
  var editor1 = $("#start").data('ace').editor.ace;
  var editor2 = $("#result").data('ace').editor.ace; 
  editor1.getSession().setUseWrapMode(true);   //turn on word wrap
  editor1.getSession().setTabSize(2);
  editor2.getSession().setUseWrapMode(true);

  // Clear both screens
  $("#cls").click(function(event) {
    editor1.setValue();
    editor2.setValue();
  });

  $( window ).resize(function() {
    editor1.resize();
    editor2.resize();
  });

  // Run code
  $( "#btn" ).click(function( event ) {
    var lines = $('#start').val();
    $.post( "/rubyeval", { line: lines }, function( data ) {
      console.log(data.answer);

      // May use all of Ace's editor methods now!
      string_io = data.answer[0];
      return_val = data.answer[1];
      error_msg = data.answer[2];
      if (error_msg != null) {
        error_msg = "\n" + data.answer[2];
      } else {
        error_msg = '';
      }

      // Just like IRB, this prints both stringIO and return value!
      editor2.setValue(string_io + "=> " + return_val + error_msg); 
      event.preventDefault();
    });

  });
</script>